#!/bin/bash
module purge

<% if context.Rapp =~ /.sif/ %>
  # load singularity
  module load singularity
  SIF=<%= context.Rapp %>
  RVERSION=<%= /(\d+\.)?(\d+\.)?(\*|\d+)/.match(context.Rapp).to_s %>
  R_LIBS_USER="${HOME}/R/portal/rocker-images/${RVERSION}"
<% else %>
  export PATH="/hpc/applications/rstudio_server/1.3.1073/bin:${PATH}"
  module load <%= context.Rapp %>
  export RSTUDIO_LD_PATH=$LD_LIBRARY_PATH
<% end %>


# Clustom environment                     
<%- unless context.environment.blank? -%> 
<%= context.environment.encode(universal_newline: true) %>                
env                                       
<%- end -%> 

# ensure singularity is loaded if we have an image
if [ -z ${SIF+x} ];
then
  echo "not using containers"
else
  module load singularity
fi                              

#
# Start RStudio Server
#

# PAM auth helper used by RStudio
export RSTUDIO_AUTH="${PWD}/bin/auth"

# Export environment
export > "${PWD}/environment.txt"

# Generate an `rsession` wrapper script
export RSESSION_WRAPPER_FILE="${PWD}/rsession.sh"
(
umask 077
sed 's/^ \{2\}//' > "${RSESSION_WRAPPER_FILE}" << EOL
  #!/bin/bash

  # Source environment
  source "${PWD}/environment.txt"

  # add rstudio to path if we're using a container
  if [ -z ${SIF+x} ];
  then
    echo "not using containers"
  else
    export PATH=/usr/lib/rstudio-server/bin:$PATH
  fi

  # Log all output from this script
  export RSESSION_LOG_FILE="${PWD}/rsession.log"
  exec &>>"\${RSESSION_LOG_FILE}"

  # make sure nothing uses more threads than is requested
  export OMP_NUM_THREADS=${SLURM_JOB_CPUS_PER_NODE}

  # Launch the original command
  echo "Launching rsession..."
  set -x
  exec rsession --r-libs-user "${R_LIBS_USER}" "\${@}"
EOL
)
chmod 700 "${RSESSION_WRAPPER_FILE}"

# Create a unique $TMPDIR for runtime files
export TMPDIR="$(mktemp -d)"

#TMPDIR=$HOME/rstudio-tmp 
mkdir -p -m 700 ${TMPDIR}/run ${TMPDIR}/lib ${TMPDIR}/tmp ${TMPDIR}/var/lib/rstudio-server

export WORKING_DIR=${PWD}
mkdir -p -m 700 ${WORKING_DIR}/etc

# generate a script to run rserver
# Generate an `rsession` wrapper script
export RUN_RSERVER="${PWD}/run_rserver.sh"
(
umask 077
sed 's/^ \{2\}//' > "${RUN_RSERVER}" << EOL
  #!/bin/bash

  echo "PATH: " ${PATH}

  rserver \
  --www-port "${port}" \
  --auth-none 0 \
  --auth-pam-helper-path "${RSTUDIO_AUTH}" \
  --auth-encrypt-password 0 \
  --server-user "${USER}" \
  --rsession-path "/etc/rstudio/ression.sh" \
  --server-data-dir "${TMPDIR}" \
  --secure-cookie-key-file "${TMPDIR}/rstudio-server/secure-cookie-key"
EOL
)
chmod 700 "${RUN_RSERVER}"

# Set working directory to home directory
cd "${HOME}"

# Output debug info
module list

# Launch the RStudio Server
echo "Starting up rserver..."
set -x

# if we have an image use singularity
if [ -z ${SIF+x} ];
then
  echo "running module"
  rserver \
  --www-port "${port}" \
  --auth-none 0 \
  --auth-pam-helper-path "${RSTUDIO_AUTH}" \
  --auth-encrypt-password 0 \
  --server-user "${USER}" \
  --rsession-path "${RSESSION_WRAPPER_FILE}" \
  --server-data-dir "${TMPDIR}" \
  --secure-cookie-key-file "${TMPDIR}/rstudio-server/secure-cookie-key"
else
  echo "running container"
  echo "SIF: " ${SIF}
  singularity exec \
  -B ${TMPDIR}:/tmp \
  -B ${TMPDIR}/run:/run \
  -B ${TMPDIR}/var/lib:/var/lib/rstudio-server \
  -B ${WORKING_DIR} \
  -B ${WORKING_DIR}/etc:/etc/rstudio \
  -B ${RSESSION_WRAPPER_FILE}:/etc/rstudio/ression.sh \
  ${SIF} \
  ${RUN_RSERVER}
fi 

printf 'rserver exited' 1>&2
