#!/bin/bash -e

# exit on error
set -e

# Benchmark info
echo "TIMING - Starting main script at: $(date)"

WARNING_FILE=$(pwd)/warnings.txt
touch ${WARNING_FILE}
LOAD_WARNINGS=0

ERROR_FILE=$(pwd)/errors.txt
touch ${ERROR_FILE}
LOAD_ERRORS=0

module purge

echo "Module Paths: ${MODULE_PATH}"

# get env / module name
NAME=<%= context.python_version %>

# Set working directory to home directory
cd "${HOME}"

#
# Start Jupyter Notebook Server
#
<% if context.python_version != "custom" %>
  CONDA_COMMAND=<%= context.conda_command %>
  <% if context.conda_type == "Conda Env" %>
    eval "$(<%= context.conda_command %> shell.bash hook)"
    conda activate ${NAME}
  <% elsif context.conda_type == "Micromamba Env" %>
    # micromamba doesn't always export everything as expected
    # see: https://github.com/mamba-org/mamba/issues/1748
    export MAMBA_EXE=<%= context.conda_command %>
    eval "$(<%= context.conda_command %> shell hook --shell=bash)"
    micromamba activate ${NAME}
  <% elsif context.conda_type == "Mamba Env" %>
    echo "type mamba:" $(type mamba)
    mamba  activate ${NAME}
  <% elsif context.conda_type == "Module" %>
    echo "loading module: ${NAME}"
    module load ${NAME}
  <% else %>
    echo "Option appears invalid (<%= context.conda_type %>)"
  <% end %>
<% end %>

# Custom environment
<%- unless context.environment.blank? -%>
  #env
  echo "Loading custom environment settings"
  <%= context.environment.encode(universal_newline: true) %>
<%- end -%>

# make sure Jupyter Lab exists
JUPYTER_EXISTS=1
JUPYTER_COMMAND=""
if ! command -v jupyter-lab &> /dev/null
then

  if command -v jupyter &> /dev/null
  then

    # this check is a bit more expensive, but more robust
    LAB_VERSION=$(jupyter --version | awk '/jupyterlab\s*:\s*(.*)/')

    if [[ $LAB_VERSION == *"not installed"* ]]; then
      echo "Jupyter Lab was not found in the environment specified." > ${ERROR_FILE}
      LOAD_ERRORS=1
      JUPYTER_EXISTS=0
    else
      JUPYTER_COMMAND="jupyter lab"
    fi

  else
    echo "Jupyter Lab was not found in the environment specified." > ${ERROR_FILE}
    LOAD_ERRORS=1
    JUPYTER_EXISTS=0
  fi
else
  JUPYTER_COMMAND="jupyter-lab"
fi

module list

# Benchmark info
echo "TIMING - Starting jupyter at: $(date)"

# Launch the Jupyter Notebook Server
set -x
if [ $JUPYTER_EXISTS -eq 1 ]; then
  ${JUPYTER_COMMAND} --config="${CONFIG_FILE}"
fi
