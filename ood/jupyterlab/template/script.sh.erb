#!/usr/bin/bash -l

export {http,https,ftp}_proxy="http://10.210.15.2:3128"

# Benchmark info
echo "TIMING - Starting main script at: $(date)"

WARNING_FILE=$(pwd)/warnings.txt
touch ${WARNING_FILE}
LOAD_WANRINGS=0

# if requested, try to build an environment
<% if context.python_version = "new" %>

module purge
module load conda

# make sure auto activate base is off
conda config --set auto_activate_base false

# build the environment with the requested name
# in $WORK/.ood_envs/$NAME

# first copy the yml file to the working dir
cp <%= context.build_environment %> environment.yml

# set the name to be the requested name
<% if context.environment_name.empty? %>
# use the name in the environment file
NAME=$(head -n 1 environment.yml)
NAME=${NAME#*:} # strips name: from beginning
<% else %>
NAME=<%= context.environment_name %>
<% end %>
# check if directory already exists
ENV_PATH=${WORK}/.ood_envs/${NAME}
if [ -d "${ENV_PATH}" ]
then
    LOAD_WANRINGS=1
    echo "Environment name: ${NAME} already exists!" > ${WARNING_FILE}
    exit 1
fi

# actually change the name
sed -i "1s/.*/name: ${NAME}/" environment.yml

# build the environment with mamba
mamba env create -y --prefix ${ENV_PATH} -f environment.yml

# overide the settings with correct values
<% context.conda_type = "Mamba Env" %>
<% context.conda_command = "" %>

<% end %>

# Set working directory to home directory
cd "${HOME}"


#
# Start Jupyter Notebook Server
#

# Purge the module environment to avoid conflicts
module purge

echo "MAMBA_ROOT_PREFIX: ${MAMBA_ROOT_PREFIX}"

<% if context.python_version != "custom" %>
CONDA_COMMAND=<%= context.conda_command %>
<% if context.conda_type == "Conda Env" %>
eval "$(<%= context.conda_command %> shell.bash hook)"
conda activate <%= context.python_version %>
<% elsif context.conda_type == "Micromamba Env" %>
# micromamba doesn't always export everything as expected
# see: https://github.com/mamba-org/mamba/issues/1748
export MAMBA_EXE=<%= context.conda_command %>
eval "$(<%= context.conda_command %> shell hook --shell=bash)"
micromamba activate <%= context.python_version %>
<% elsif context.conda_type == "Mamba Env" %>
export MAMBA_EXE=<%= context.conda_command %>
eval "$(<%= context.conda_command %> shell hook --shell=bash)"
mamba  activate <%= context.python_version %>
<% end %>
<% end %>

# Clustom environment
<%- unless context.environment.blank? -%>
env
<%= context.environment.encode(universal_newline: true) %>
<%- end -%>

# make sure Jupyter Lab exists
if ! command -v jupyter-lab &> /dev/null
then

  if command -v jupyter &> /dev/null
  then

    # this check is a bit more expensive, but more robust
    LAB_VERSION=$(jupyter --version | awk '/jupyterlab\s*:\s*(.*)/')

    if [[ $LAB_VERSION == *"not installed"* ]]; then
      echo "Jupyter Lab not found, using default"
      echo "Jupyter Lab was not found in the environment specified. The default python/3 module was loaded. If this is not the desired behavior, please ensure Jupyter Lab is installed in your environment and in your path" > ${WARNING_FILE}
      LOAD_WANRINGS=1
      module load python/3 
    fi

  else

    echo "Jupyter not found, using default."
    echo "Jupyter Lab was not found in the environment specified. The default python/3 module was loaded. If this is not the desired behavior, please ensure Jupyter Lab is installed in your environment and in your path" > ${WARNING_FILE}
    LOAD_WANRINGS=1
    module load python/3

  fi
fi

module list

# Benchmark info
echo "TIMING - Starting jupyter at: $(date)"

# Launch the Jupyter Notebook Server
set -x
jupyter lab --config="${CONFIG_FILE}"
