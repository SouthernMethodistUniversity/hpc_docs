#!/bin/bash
module purge

# load the requested module
FORM_MODULE=<%= context.r_module %>
EXTENSION="${FORM_MODULE##*.}"

# if exension is .lua split into folder
# and module otherwise just load the module
if [ "$EXTENSION" == "lua" ]
then
  MOD_NAME=$(basename -s .lua ${FORM_MODULE})
  MOD_PATH=$(dirname ${FORM_MODULE})
  module use ${MOD_PATH}
  module --ignore_cache load ${MOD_NAME}
else
  module load ${FORM_MODULE}
fi
# Clustom environment settings
<%- unless context.environment.blank? -%>
env
<%= context.environment.encode(universal_newline: true) %>
<%- end -%>

#
# Start RStudio Server
#

# PAM auth helper used by RStudio
export RSTUDIO_AUTH="${PWD}/bin/auth"

# make sure RSTUDIO looks for rstudio-prefs.json
export RSTUDIO_CONFIG_DIRS="/etc/"

# Export environment
export > "${PWD}/environment.txt"

# Generate an `rsession` wrapper script
export RSESSION_WRAPPER_FILE="${PWD}/rsession.sh"
(
umask 077
sed 's/^ \{2\}//' > "${RSESSION_WRAPPER_FILE}" << EOL
  #!/bin/bash

  # Source environment
  source "${PWD}/environment.txt"

  # make sure the container libR is visible inside container
  export LD_LIBRARY_PATH="/usr/local/lib/R/lib${LD_LIBRARY_PATH:+":$LD_LIBRARY_PATH"}"

  # Log all output from this script
  export RSESSION_LOG_FILE="${PWD}/rsession.log"
  exec &>>"\${RSESSION_LOG_FILE}"

  # make sure nothing uses more threads than is requested
  export OMP_NUM_THREADS=${SLURM_CPUS_ON_NODE}

  # Launch the original command
  echo "Launching rsession..."
  set -x
  exec ${CONTAINER_RSESSION} \
    --r-libs-user "${R_LIBS_USER}" \
    --session-timeout-minutes <%= context.rserver_timeout %> \
    --session-timeout-suspend 0 \
    "\${@}"
EOL
)
chmod 700 "${RSESSION_WRAPPER_FILE}"

# Generate a script to kill rserver if it is idle for too long
export RSERVER_TIMEOUT_FILE="${PWD}/rtimeout.sh"
(
umask 077
sed 's/^ \{2\}//' > "${RSERVER_TIMEOUT_FILE}" << EOL
  #!/bin/bash

  # Source environment
  source "${PWD}/environment.txt"
  sleep 30

  # Log all output from this script
  export RTIMEOUT_LOG_FILE="${PWD}/rtimeout.log"
  exec &>>"\${RTIMEOUT_LOG_FILE}"

  TIMEOUT_LIMIT=<%=context.rserver_timeout.to_i()*60 %>
  IDLE_TIME=0
  NSESSIONS=\$(rstudio-server active-sessions | wc -l)
  while [ \${IDLE_TIME} -le \${TIMEOUT_LIMIT} ] || [ \${NSESSIONS} -gt 1 ]
  do
    # check for active session
    if [ \${NSESSIONS} -gt 1 ]; then
      IDLE_TIME=0
      # after a session has started allow 5 minute
      # grace after that session times out or the
      # requested limit if smaller
      TIMEOUT_LIMIT=\$(( 300 < \${TIMEOUT_LIMIT} ? 300 : \${TIMEOUT_LIMIT} ))
    else
      sleep 30
      IDLE_TIME=\$((\${IDLE_TIME} + 30))
      echo "IDLE for \${IDLE_TIME} seconds"
    fi
    NSESSIONS=\$(rstudio-server active-sessions | wc -l)
  done

  # kill rserver
  pkill -15 rserver

EOL
)
chmod 700 "${RSERVER_TIMEOUT_FILE}"


# Create a unique $TMPDIR for runtime files
export TMPDIR="$(mktemp -d)"
mkdir -p -m 700 ${TMPDIR}/run ${TMPDIR}/lib ${TMPDIR}/tmp ${TMPDIR}/var/lib/rstudio-server

export WORKING_DIR=${PWD}
mkdir -p -m 700 ${WORKING_DIR}/etc

# Generate a script to start the server
export RUN_RSERVER="${PWD}/run_rserver.sh"
(
umask 077
sed 's/^ \{2\}//' > "${RUN_RSERVER}" << EOL
  #!/bin/bash

  # Source environment
  source "${PWD}/environment.txt"

  # start the timeout check
  exec "${RSERVER_TIMEOUT_FILE}" &

  # start the server
  exec ${CONTAINER_RSERVER} \
  --www-port "${port}" \
  --auth-none 0 \
  --auth-pam-helper-path "${RSTUDIO_AUTH}" \
  --auth-encrypt-password 0 \
  --server-user "${USER}" \
  --rsession-path "${RSESSION_WRAPPER_FILE}" \
  --server-data-dir "${TMPDIR}" \
  --secure-cookie-key-file "${TMPDIR}/rstudio-server/secure-cookie-key" \
  --rsession-which-r="${CONTAINER_R}"

EOL
)
chmod 700 "${RUN_RSERVER}"

# Generate Rstudio preference file (global)
mkdir -p ${PWD}/etc
export RSTUDIO_PREFS="${PWD}/etc/rstudio-prefs.json"
(
umask 077
sed 's/^ \{2\}//' > "${RSTUDIO_PREFS}" << EOL
{
    "terminal_track_environment": false,
    "load_workspace": false,
    "restore_source_documents": false,
    "restore_last_project": false
}
EOL
)
chmod 700 "${RSTUDIO_PREFS}"

# make rserver log to file in PWD
export RSTUDIO_LOGS="${PWD}/etc/logging.conf"
(
umask 077
sed 's/^ \{2\}//' > "${RSTUDIO_LOGS}" << EOL
[*]
log-level=debug
logger-type=file
log-dir=${PWD}
EOL
)
chmod 700 "${RSTUDIO_LOGS}"

# Set working directory to home directory
cd "${HOME}"

# Output debug info
module list

# Launch the RStudio Server
echo "Starting up rserver..."
set -x

unset APPTAINER_BIND

export APPTAINERENV_XDG_CONFIG_DIRS="/etc/"
export APPTAINERENV_RSTUDIO_CONFIG_DIRS=$RSTUDIO_CONFIG_DIRS
apptainer exec \
  -B ${TMPDIR}:/tmp \
  -B ${TMPDIR}/run:/run \
  -B ${TMPDIR}/var/lib:/var/lib/rstudio-server \
  -B ${WORKING_DIR} \
  -B ${WORKING_DIR}/etc/logging.conf:/etc/rstudio/logging.conf \
  -B ${WORKING_DIR}/etc/rstudio-prefs.json:/etc/rstudio/rstudio-prefs.json \
  -B ${HOME} \
  -B ${WORK} \
  -B ${SCRATCH} \
  -B /work \
  -B /hpc \
  ${CONTAINER_IMAGE} \
  ${RUN_RSERVER}

printf 'rserver exited' 1>&2
