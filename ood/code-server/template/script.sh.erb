#!/usr/bin/bash -l
<%

# Set our working directory.
working_dir = Pathname.new(ENV['HOME'])

code_server_version   = context.version
%>

export CODE_SERVER_DATAROOT="$HOME/.local/share/code-server"
mkdir -p "$CODE_SERVER_DATAROOT/extensions"

# Expose the password to the server.
PASSWORD="$password"
export password PASSWORD

# Print compute node.
echo "$(date): Running on compute node ${compute_node}:$port"

module load apptainer

# VSCode complains that system git is too old.
# module load code-server/<%= code_server_version %>

CPP_FILE="<%= working_dir.to_s %>/.vscode/c_cpp_properties.json"

if [[ -f "$CPP_FILE" ]]; then
    CPP_DIR="${TMPDIR:=/tmp/$USER}/cpp-vscode"
    mkdir -p "$CPP_DIR"
    chmod 700 "$CPP_DIR"

    # if the file is empty, let's initialize it
    [ -s "$CPP_FILE" ] || echo '{"configurations": [{ "name": "Linux", "browse": { "databaseFilename": null }}], "version": 4}' > "$CPP_FILE"

    jq --arg dbfile "$CPP_DIR/cpp-vscode.db" \
      '.configurations[0].browse.databaseFilename = $dbfile' \
      "$CPP_FILE" > "$CPP_FILE".new

    mv "$CPP_FILE".new "$CPP_FILE"
  fi

# Export environment
export > "${PWD}/environment.txt"

# create a script to load env and start code-server
cat << "CTRSCRIPT" > container.sh
#!/bin/bash

# Source environment
source "${PWD}/environment.txt"

# Custom environment
<%- unless context.environment.blank? -%>
echo "Loading custom environment settings"
<%= context.environment.encode(universal_newline: true) %>
<%- end -%>

# code server
/app/code-server/bin/code-server \
    --auth="password" \
    --bind-addr="0.0.0.0:${port}" \
    --disable-telemetry \
    --ignore-last-opened \
    --user-data-dir="$CODE_SERVER_DATAROOT" \
    "<%= working_dir.to_s %>"

CTRSCRIPT
    chmod +x container.sh

CONTAINER_SCRIPT=$(pwd)/container.sh

#
# Start Code Server.
#
echo "$(date): Started code-server"
echo ""

apptainer exec \
    -B $SCRATCH \
    -B /etc/csh.cshrc \
    -B /etc/profile.d \
    <%= context.version %> \
    $CONTAINER_SCRIPT
